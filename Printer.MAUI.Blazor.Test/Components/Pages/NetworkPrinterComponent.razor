@page "/networkPrinter"
@using Printer.Library.Interfaces
@using Printer.Library.PrinterImplementations
@using Printer.MAUI.Blazor.Test.Utility

<h3>Network Printer</h3>
<div>
    <!-- Display printing results or errors here -->
    @if (printed)
    {
        <div class="alert alert-success mt-3">
            <h4>Printing Result:</h4>
            <p>@inputText</p>
        </div>
    }
    @if (!string.IsNullOrEmpty(_printError))
    {
        <div class="alert alert-danger mt-3">
            <h4>Error:</h4>
            <p>@_printError</p>
        </div>
    }
</div>

<div class="form-group">
    <label for="txtIpAddress">Printer Ip Address:</label>
    <input type="text" class="form-control" @bind="_ipAddress" />
</div>
<div class="form-group">
    <label for="txtPortNumber">Printer Port:</label>
    <input type="number" class="form-control" @bind="_printerPort" />
</div>

<div class="form-group">
    <label for="txtPrintCount">Print Copies:</label>
    <input type="number" class="form-control" @bind="_printCount" />
</div>
<div class="form-check">
    <input type="checkbox" class="form-check-input" @bind="_isBold" id="chkIsBold" />
    <label class="form-check-label" for="chkIsBold">Bold Text</label>
</div>
<div class="form-group">
    <label for="textToEncode">Text to Print:</label>
    <textarea class="form-control" id="textToEncode" rows="10" cols="50" @bind="@inputText"></textarea>
</div>

<div class="mt-1">
    <button class="btn btn-primary" @onclick="Print">Print</button>
    <button class="btn btn-primary" @onclick="PrintAndCut">Print And Cut</button>
    <button class="btn btn-danger" @onclick="Cut">Cut</button>
</div>
@code{
    private string _ipAddress = "127.0.0.1";
    private int _printerPort = 80;
    private bool printed = false;
    private string _printError = string.Empty;
    private string inputText = string.Empty;
    private int _printCount = 1;
    private bool _isBold { get; set; }
    private readonly string _boldStart = $"{(char)27}{(char)69}{(char)1}";
    private readonly string _boldEnd = $"{(char)27}{(char)69}{(char)0}";
    // Define available COM ports and baud rates here

    private async Task Print()
    {
        string printableText = _isBold ? _boldStart + inputText + _boldStart : inputText;
        await PrintText(printableText);
        await PrintText("\n\n\n\n");

    }
    private async Task PrintAndCut()
    {
        string printableText = _isBold ? _boldStart + inputText + _boldStart : inputText;
        await PrintText(printableText);
        await PrintText("\n\n\n\n");
        await Cut();
    }
    private async Task Cut()
    {
        await PrintText($"{(char)27}{(char)105}");
    }
    private async Task PrintText(string text)
    {
        _printError = string.Empty;
        try
        {
            using (var serialPrinter = new NetworkPrinter(_ipAddress, _printerPort))
            {
                // Step 2: Create an IPrintable instance with the text "Hello Parminder"
                IPrintable printableContent = new PrintableContent(text);

                // Step 3: Print the content using the SerialPortPrinter

                if (_printCount <= 0)
                {
                    _printCount = 1;
                }
                for (int i = 0; i < _printCount; i++)
                {

                    serialPrinter.Print(printableContent);
                }
            }
            printed = true;
        }
        catch (Exception e)
        {
            printed = false;
            _printError = e.Message;
        }
    }
}